// Code generated by enumgen. DO NOT EDIT.

package testdata

import "fmt"

// An enumeration defined in a Go file.
type E4 struct{ _E4 uint8 }

// Enum returns the name of the enumeration type for E4.
func (E4) Enum() string { return "E4" }

// String returns the string representation of E4 v.
func (v E4) String() string { return _str_E4[v._E4] }

// Valid reports whether v is a valid E4 value.
func (v E4) Valid() bool { return v._E4 != 0 }

var (
	_str_E4 = []string{"<invalid>", "P", "D", "Q"}

	E4_P = E4{1}
	E4_D = E4{2}
	E4_Q = E4{3}
)

// A Color is a source of joy for all who behold it.
type Color struct{ _Color uint8 }

// Enum returns the name of the enumeration type for Color.
func (Color) Enum() string { return "Color" }

// String returns the string representation of Color v.
func (v Color) String() string { return _str_Color[v._Color] }

// Valid reports whether v is a valid Color value.
func (v Color) Valid() bool { return v._Color != 0 }

// Set implements part of the flag.Value interface for Color.
// A value must equal the string representation of an enumerator.
func (v *Color) Set(s string) error {
	for i, opt := range _str_Color[1:] {
		if opt == s {
			v._Color = uint8(i + 1)
			return nil
		}
	}
	return fmt.Errorf("invalid value for Color: %q", s)
}

var (
	_str_Color = []string{"<invalid>", "fire-engine-red", "scummy-green", "azure-sky-blue"}

	Red   = Color{1} // Red is the colour of my true love's eyes.
	Green = Color{2} // Green is the colour of my true love's blood.
	Blue  = Color{3}
)
